#pragma once
#include "Commom.h"

#ifdef __cplusplus
extern "C"
{
#endif

	typedef struct hkVector4* hkVector4Ref;
	typedef struct hkVector4fComparison* hkVector4fComparisonRef;
    typedef struct hkQuaternion* hkQuaternionRef;
    typedef struct hkMatrix3* hkMatrix3Ref;
    typedef struct hkRotation* hkRotationRef;

	HAVOK_C_API hkVector4Ref HAVOK_C_CALL hkVector4_new();
	HAVOK_C_API hkVector4Ref HAVOK_C_CALL hkVector4_new_xyzw(float x, float y, float z, float w);
    HAVOK_C_API void HAVOK_C_CALL hkVector4_delete(hkVector4Ref ptr);
    HAVOK_C_API void HAVOK_C_CALL hkVector4_set(hkVector4Ref ptr, float x, float y, float z, float w);
    HAVOK_C_API void HAVOK_C_CALL hkVector4_setW(hkVector4Ref ptr, float w);
    HAVOK_C_API float HAVOK_C_CALL hkVector4_getW(hkVector4Ref ptr);
    HAVOK_C_API void HAVOK_C_CALL hkVector4_setAll(hkVector4Ref ptr, float a);
    HAVOK_C_API void HAVOK_C_CALL hkVector4_setAll3(hkVector4Ref ptr, float a);
    HAVOK_C_API void HAVOK_C_CALL hkVector4_sub(hkVector4Ref ptr, hkVector4Ref a);
    HAVOK_C_API void HAVOK_C_CALL hkVector4_add(hkVector4Ref ptr, hkVector4Ref a);
    HAVOK_C_API void HAVOK_C_CALL hkVector4_mul(hkVector4Ref ptr, hkVector4Ref a);
    HAVOK_C_API void HAVOK_C_CALL hkVector4_div(hkVector4Ref ptr, hkVector4Ref a);
    HAVOK_C_API void HAVOK_C_CALL hkVector4_setAdd(hkVector4Ref ptr, hkVector4Ref v0, hkVector4Ref v1);
    HAVOK_C_API void HAVOK_C_CALL hkVector4_setAdd_f(hkVector4Ref ptr, hkVector4Ref v0, float v1);
    HAVOK_C_API void HAVOK_C_CALL hkVector4_setSub(hkVector4Ref ptr, hkVector4Ref v0, hkVector4Ref v1);
    HAVOK_C_API void HAVOK_C_CALL hkVector4_setSub_f(hkVector4Ref ptr, hkVector4Ref v0, float v1);
    HAVOK_C_API void HAVOK_C_CALL hkVector4_setMul(hkVector4Ref ptr, hkVector4Ref v0, hkVector4Ref v1);
    HAVOK_C_API void HAVOK_C_CALL hkVector4_setMul_f(hkVector4Ref ptr, hkVector4Ref v1, float r);
    HAVOK_C_API void HAVOK_C_CALL hkVector4_setDiv(hkVector4Ref ptr, hkVector4Ref v0, hkVector4Ref v1);
    HAVOK_C_API void HAVOK_C_CALL hkVector4_setDiv4(hkVector4Ref ptr, hkVector4Ref v0, hkVector4Ref v1);
    HAVOK_C_API void HAVOK_C_CALL hkVector4_setDot3(hkVector4Ref ptr, hkVector4Ref v0, hkVector4Ref v1);
    HAVOK_C_API void HAVOK_C_CALL hkVector4_setDot4(hkVector4Ref ptr, hkVector4Ref v0, hkVector4Ref v1);
    HAVOK_C_API void HAVOK_C_CALL hkVector4_setSubMul_f(hkVector4Ref ptr, hkVector4Ref a, hkVector4Ref b, float r);
    HAVOK_C_API void HAVOK_C_CALL hkVector4_setAddMul_f(hkVector4Ref ptr, hkVector4Ref a, hkVector4Ref b, float r);
    HAVOK_C_API void HAVOK_C_CALL hkVector4_setAddMul(hkVector4Ref ptr, hkVector4Ref a, hkVector4Ref x, hkVector4Ref y);
    HAVOK_C_API void HAVOK_C_CALL hkVector4_setSubMul(hkVector4Ref ptr, hkVector4Ref a, hkVector4Ref x, hkVector4Ref y);
    HAVOK_C_API void HAVOK_C_CALL hkVector4_setCross(hkVector4Ref ptr, hkVector4Ref v0, hkVector4Ref v1);
    HAVOK_C_API void HAVOK_C_CALL hkVector4_setReciprocal(hkVector4Ref ptr, hkVector4Ref v);
    HAVOK_C_API void HAVOK_C_CALL hkVector4_setSqrt(hkVector4Ref ptr, hkVector4Ref a);
    HAVOK_C_API void HAVOK_C_CALL hkVector4_setSqrtInverse(hkVector4Ref ptr, hkVector4Ref a);
    HAVOK_C_API void HAVOK_C_CALL hkVector4_setInterpolate(hkVector4Ref ptr, hkVector4Ref a, hkVector4Ref b, float t);
    HAVOK_C_API hkVector4fComparisonRef HAVOK_C_CALL hkVector4_compare_equal(hkVector4Ref ptr, hkVector4Ref a);
    HAVOK_C_API hkVector4fComparisonRef HAVOK_C_CALL hkVector4_compare_notEqual(hkVector4Ref ptr, hkVector4Ref a);
    HAVOK_C_API hkVector4fComparisonRef HAVOK_C_CALL hkVector4_compare_less(hkVector4Ref ptr, hkVector4Ref a);
    HAVOK_C_API hkVector4fComparisonRef HAVOK_C_CALL hkVector4_compare_lessEqual(hkVector4Ref ptr, hkVector4Ref a);
    HAVOK_C_API hkVector4fComparisonRef HAVOK_C_CALL hkVector4_compare_greater(hkVector4Ref ptr, hkVector4Ref a);
    HAVOK_C_API hkVector4fComparisonRef HAVOK_C_CALL hkVector4_compare_greaterEqual(hkVector4Ref ptr, hkVector4Ref a);
    HAVOK_C_API hkVector4fComparisonRef HAVOK_C_CALL hkVector4_compare_lessZero(hkVector4Ref ptr);
    HAVOK_C_API hkVector4fComparisonRef HAVOK_C_CALL hkVector4_compare_lessEqualZero(hkVector4Ref ptr);
    HAVOK_C_API hkVector4fComparisonRef HAVOK_C_CALL hkVector4_compare_greaterZero(hkVector4Ref ptr);
    HAVOK_C_API hkVector4fComparisonRef HAVOK_C_CALL hkVector4_compare_greaterEqualZero(hkVector4Ref ptr);
    HAVOK_C_API hkVector4fComparisonRef HAVOK_C_CALL hkVector4_compare_equalZero(hkVector4Ref ptr);
    HAVOK_C_API hkVector4fComparisonRef HAVOK_C_CALL hkVector4_compare_notEqualZero(hkVector4Ref ptr);
    HAVOK_C_API hkVector4fComparisonRef HAVOK_C_CALL hkVector4_signBitSet(hkVector4Ref ptr);
    HAVOK_C_API hkVector4fComparisonRef HAVOK_C_CALL hkVector4_signBitClear(hkVector4Ref ptr);
    HAVOK_C_API void HAVOK_C_CALL hkVector4_setSelect(hkVector4Ref ptr, hkVector4fComparisonRef compareMask, hkVector4Ref trueValue, hkVector4Ref falseValue);
    HAVOK_C_API void HAVOK_C_CALL hkVector4_zeroIfFalse(hkVector4Ref ptr, hkVector4fComparisonRef compareMask);
    HAVOK_C_API void HAVOK_C_CALL hkVector4_zeroIfTrue(hkVector4Ref ptr, hkVector4fComparisonRef compareMask);
    HAVOK_C_API void HAVOK_C_CALL hkVector4_setFlipSign_m(hkVector4Ref ptr, hkVector4Ref v, hkVector4fComparisonRef mask);
    HAVOK_C_API void HAVOK_C_CALL hkVector4_setFlipSign(hkVector4Ref ptr, hkVector4Ref v, hkVector4Ref vSign);
    HAVOK_C_API void HAVOK_C_CALL hkVector4_setFlipSign_f(hkVector4Ref ptr, hkVector4Ref v, float sSign);
    HAVOK_C_API void HAVOK_C_CALL hkVector4_setAbs(hkVector4Ref ptr, hkVector4Ref v);
    HAVOK_C_API void HAVOK_C_CALL hkVector4_setMin(hkVector4Ref ptr, hkVector4Ref a, hkVector4Ref b);
    HAVOK_C_API void HAVOK_C_CALL hkVector4_setMax(hkVector4Ref ptr, hkVector4Ref a, hkVector4Ref b);
    HAVOK_C_API void HAVOK_C_CALL hkVector4_setClamped(hkVector4Ref ptr, hkVector4Ref a, hkVector4Ref minVal, hkVector4Ref maxVal);
    HAVOK_C_API void HAVOK_C_CALL hkVector4_setClampedToMaxLength(hkVector4Ref ptr, hkVector4Ref vSrc, float maxLen);
    HAVOK_C_API void HAVOK_C_CALL hkVector4_equal(hkVector4Ref ptr, hkVector4Ref a);
    HAVOK_C_API void HAVOK_C_CALL hkVector4_normalize3(hkVector4Ref ptr);
    HAVOK_C_API void HAVOK_C_CALL hkVector4_normalize4(hkVector4Ref ptr);
    HAVOK_C_API void HAVOK_C_CALL hkVector4_normalize3IfNotZero(hkVector4Ref ptr);
    HAVOK_C_API float HAVOK_C_CALL hkVector4_length3(hkVector4Ref ptr);
    HAVOK_C_API float HAVOK_C_CALL hkVector4_length4(hkVector4Ref ptr);
    HAVOK_C_API float HAVOK_C_CALL hkVector4_getComponent(hkVector4Ref ptr, int component);
    HAVOK_C_API void HAVOK_C_CALL hkVector4_setComponent(hkVector4Ref ptr, int component, float val);
    HAVOK_C_API bool HAVOK_C_CALL hkVector4_isOk1(hkVector4Ref ptr);
    HAVOK_C_API bool HAVOK_C_CALL hkVector4_isOk2(hkVector4Ref ptr);
    HAVOK_C_API bool HAVOK_C_CALL hkVector4_isOk3(hkVector4Ref ptr);
    HAVOK_C_API bool HAVOK_C_CALL hkVector4_isOk4(hkVector4Ref ptr);

    HAVOK_C_API hkVector4fComparisonRef HAVOK_C_CALL hkVector4fComparison_new(int mask);
	HAVOK_C_API void HAVOK_C_CALL hkVector4fComparison_delete(hkVector4fComparisonRef ptr);
	HAVOK_C_API int HAVOK_C_CALL hkVector4fComparison_getMask(hkVector4fComparisonRef ptr);
	HAVOK_C_API int HAVOK_C_CALL hkVector4fComparison_getMask(hkVector4fComparisonRef ptr, int m);
	HAVOK_C_API bool HAVOK_C_CALL hkVector4fComparison_allAreSet(hkVector4fComparisonRef ptr);
	HAVOK_C_API bool HAVOK_C_CALL hkVector4fComparison_anyIsSet(hkVector4fComparisonRef ptr);
	HAVOK_C_API int HAVOK_C_CALL hkVector4fComparison_getIndexOfFirstComponentSet(hkVector4fComparisonRef ptr);
	HAVOK_C_API int HAVOK_C_CALL hkVector4fComparison_getIndexOfLastComponentSet(hkVector4fComparisonRef ptr);
	HAVOK_C_API hkVector4fComparisonRef HAVOK_C_CALL hkVector4fComparison_horizontalAnd1(hkVector4fComparisonRef ptr);
	HAVOK_C_API hkVector4fComparisonRef HAVOK_C_CALL hkVector4fComparison_horizontalAnd2(hkVector4fComparisonRef ptr);
	HAVOK_C_API hkVector4fComparisonRef HAVOK_C_CALL hkVector4fComparison_horizontalAnd3(hkVector4fComparisonRef ptr);
	HAVOK_C_API hkVector4fComparisonRef HAVOK_C_CALL hkVector4fComparison_horizontalAnd4(hkVector4fComparisonRef ptr);
	HAVOK_C_API hkVector4fComparisonRef HAVOK_C_CALL hkVector4fComparison_horizontalOr1(hkVector4fComparisonRef ptr);
	HAVOK_C_API hkVector4fComparisonRef HAVOK_C_CALL hkVector4fComparison_horizontalOr2(hkVector4fComparisonRef ptr);
	HAVOK_C_API hkVector4fComparisonRef HAVOK_C_CALL hkVector4fComparison_horizontalOr3(hkVector4fComparisonRef ptr);
	HAVOK_C_API hkVector4fComparisonRef HAVOK_C_CALL hkVector4fComparison_horizontalOr4(hkVector4fComparisonRef ptr);

    HAVOK_C_API hkQuaternionRef HAVOK_C_CALL hkQuaternion_new();
    HAVOK_C_API void HAVOK_C_CALL hkQuaternion_delete(hkQuaternionRef ptr);
    HAVOK_C_API hkQuaternionRef HAVOK_C_CALL hkQuaternion_new_xyzr(float x, float y, float z, float r);
    HAVOK_C_API hkQuaternionRef HAVOK_C_CALL hkQuaternion_new_axis(hkVector4Ref axis, float angle);
    HAVOK_C_API void HAVOK_C_CALL hkQuaternion_set(hkQuaternionRef ptr, float x, float y, float z, float r);
    HAVOK_C_API void HAVOK_C_CALL hkQuaternion_setIdentity(hkQuaternionRef ptr);
    HAVOK_C_API void HAVOK_C_CALL hkQuaternion_setInverse(hkQuaternionRef ptr, hkQuaternionRef q);;
    HAVOK_C_API void HAVOK_C_CALL hkQuaternion_setMul(hkQuaternionRef ptr, float r, hkQuaternionRef q);
    HAVOK_C_API void HAVOK_C_CALL hkQuaternion_addMul(hkQuaternionRef ptr, float r, hkQuaternionRef q);
    HAVOK_C_API void HAVOK_C_CALL hkQuaternion_setMul(hkQuaternionRef ptr, hkQuaternionRef q0, hkQuaternionRef q1);
    HAVOK_C_API void HAVOK_C_CALL hkQuaternion_mul(hkQuaternionRef ptr, hkQuaternionRef q);
    HAVOK_C_API void HAVOK_C_CALL hkQuaternion_setMulInverse(hkQuaternionRef ptr, hkQuaternionRef q0, hkQuaternionRef q1);
    HAVOK_C_API void HAVOK_C_CALL hkQuaternion_setInverseMul(hkQuaternionRef ptr, hkQuaternionRef q0, hkQuaternionRef q1);
    HAVOK_C_API void HAVOK_C_CALL hkQuaternion_estimateAngleTo(hkQuaternionRef ptr, hkQuaternionRef to, hkVector4Ref angleOut);
    HAVOK_C_API void HAVOK_C_CALL hkQuaternion_setAxisAngle(hkQuaternionRef ptr, hkVector4Ref axis, float angle);
    HAVOK_C_API void HAVOK_C_CALL hkQuaternion_setFromEulerAngles(hkQuaternionRef ptr, float roll, float pitch, float yaw);
    HAVOK_C_API void HAVOK_C_CALL hkQuaternion_removeAxisComponent(hkQuaternionRef ptr, hkVector4Ref axis);
    HAVOK_C_API void HAVOK_C_CALL hkQuaternion_decomposeRestAxis(hkQuaternionRef ptr, hkVector4Ref axis, hkQuaternionRef restOut, float angleOut);
    HAVOK_C_API void HAVOK_C_CALL hkQuaternion_setSlerp(hkQuaternionRef ptr, hkQuaternionRef q0, hkQuaternionRef q1, float t);
    HAVOK_C_API void HAVOK_C_CALL hkQuaternion_setBarycentric(hkQuaternionRef ptr, hkQuaternionRef qVerts, hkVector4Ref vLambda);
    HAVOK_C_API void HAVOK_C_CALL hkQuaternion_setReal(hkQuaternionRef ptr, float r);
    HAVOK_C_API float HAVOK_C_CALL hkQuaternion_getReal(hkQuaternionRef ptr);
    HAVOK_C_API void HAVOK_C_CALL hkQuaternion_setImag(hkQuaternionRef ptr, hkVector4Ref i);
    HAVOK_C_API hkVector4Ref HAVOK_C_CALL hkQuaternion_getImag(hkQuaternionRef ptr);
    HAVOK_C_API float HAVOK_C_CALL hkQuaternion_getAngle(hkQuaternionRef ptr);
    HAVOK_C_API void HAVOK_C_CALL hkQuaternion_getAxis(hkQuaternionRef ptr, hkVector4Ref axis);
    HAVOK_C_API bool HAVOK_C_CALL hkQuaternion_hasValidAxis(hkQuaternionRef ptr);
    HAVOK_C_API void HAVOK_C_CALL hkQuaternion_setClosest(hkQuaternionRef ptr, hkQuaternionRef q, hkQuaternionRef qReference);
    HAVOK_C_API void HAVOK_C_CALL hkQuaternion_setFlippedRotation(hkQuaternionRef ptr, hkVector4Ref from);
    HAVOK_C_API void HAVOK_C_CALL hkQuaternion_normalize(hkQuaternionRef ptr);
    HAVOK_C_API void HAVOK_C_CALL hkQuaternion_operator_equal(hkQuaternionRef ptr, hkQuaternionRef a);
    HAVOK_C_API void HAVOK_C_CALL hkQuaternion_get_m_vec(hkQuaternionRef ptr, hkVector4Ref out);
    HAVOK_C_API void HAVOK_C_CALL hkQuaternion_set_m_vec(hkQuaternionRef ptr, hkVector4Ref out);
    HAVOK_C_API bool HAVOK_C_CALL hkQuaternion_isOk(hkQuaternionRef ptr, float epsilon = float(1e-3f));

    HAVOK_C_API hkMatrix3Ref HAVOK_C_CALL hkMatrix3_new();
    HAVOK_C_API void HAVOK_C_CALL hkMatrix3_delete(hkMatrix3Ref ptr);
    HAVOK_C_API hkVector4Ref HAVOK_C_CALL hkMatrix3_getColumn(hkMatrix3Ref ptr, int i);
    HAVOK_C_API void HAVOK_C_CALL hkMatrix3_getRow(hkMatrix3Ref ptr, int row, hkVector4Ref r);
    HAVOK_C_API void HAVOK_C_CALL hkMatrix3_setColumn0(hkMatrix3Ref ptr, hkVector4Ref c);
    HAVOK_C_API void HAVOK_C_CALL hkMatrix3_setColumn1(hkMatrix3Ref ptr, hkVector4Ref c);
    HAVOK_C_API void HAVOK_C_CALL hkMatrix3_setColumn2(hkMatrix3Ref ptr, hkVector4Ref c);
    HAVOK_C_API void HAVOK_C_CALL hkMatrix3_setRows(hkMatrix3Ref ptr, hkVector4Ref r0, hkVector4Ref r1, hkVector4Ref r2);
    HAVOK_C_API void HAVOK_C_CALL hkMatrix3_getRows(hkMatrix3Ref ptr, hkVector4Ref r0, hkVector4Ref r1, hkVector4Ref r2);
    HAVOK_C_API void HAVOK_C_CALL hkMatrix3_setCols(hkMatrix3Ref ptr, hkVector4Ref c0, hkVector4Ref c1, hkVector4Ref c2);
    HAVOK_C_API void HAVOK_C_CALL hkMatrix3_getCols(hkMatrix3Ref ptr, hkVector4Ref c0, hkVector4Ref c1, hkVector4Ref c2);
    HAVOK_C_API void HAVOK_C_CALL hkMatrix3_setZero(hkMatrix3Ref ptr);
    HAVOK_C_API void HAVOK_C_CALL hkMatrix3_setIdentity(hkMatrix3Ref ptr);
    HAVOK_C_API hkMatrix3Ref HAVOK_C_CALL hkMatrix3_getIdentity();
    HAVOK_C_API bool HAVOK_C_CALL hkMatrix3_isApproximatelyEqual(hkMatrix3Ref ptr, hkMatrix3Ref m, float epsilon = float(1e-3f));
    HAVOK_C_API bool HAVOK_C_CALL hkMatrix3_isSymmetric(hkMatrix3Ref ptr, float epsilon = float(1e-3f));
    HAVOK_C_API void HAVOK_C_CALL hkMatrix3_setCrossSkewSymmetric(hkMatrix3Ref ptr, hkVector4Ref r);
    HAVOK_C_API int8_t HAVOK_C_CALL hkMatrix3_invert(hkMatrix3Ref ptr, float epsilon);
    HAVOK_C_API void HAVOK_C_CALL hkMatrix3_setInverseSymmetric(hkMatrix3Ref ptr, hkMatrix3Ref src);
    HAVOK_C_API void HAVOK_C_CALL hkMatrix3_solveSymmetric(hkMatrix3Ref ptr, hkVector4Ref b, hkVector4Ref v);
    HAVOK_C_API void HAVOK_C_CALL hkMatrix3_invertSymmetric(hkMatrix3Ref ptr);
    HAVOK_C_API float HAVOK_C_CALL hkMatrix3_frobeniusNormSqr(hkMatrix3Ref ptr);
    HAVOK_C_API void HAVOK_C_CALL hkMatrix3_transpose(hkMatrix3Ref ptr);
    HAVOK_C_API void HAVOK_C_CALL hkMatrix3_setTranspose(hkMatrix3Ref ptr, hkMatrix3Ref s);
    HAVOK_C_API void HAVOK_C_CALL hkMatrix3_setMul(hkMatrix3Ref ptr, hkMatrix3Ref a, hkMatrix3Ref b);
    HAVOK_C_API void HAVOK_C_CALL hkMatrix3_setMulInverse(hkMatrix3Ref ptr, hkMatrix3Ref a, hkRotationRef b);
    HAVOK_C_API void HAVOK_C_CALL hkMatrix3_setMulInverseMul(hkMatrix3Ref ptr, hkRotationRef a, hkMatrix3Ref b);
    HAVOK_C_API void HAVOK_C_CALL hkMatrix3_setMul_scale(hkMatrix3Ref ptr, float scale, hkMatrix3Ref a);
    HAVOK_C_API void HAVOK_C_CALL hkMatrix3_setDiagonalMul(hkMatrix3Ref ptr, hkVector4Ref vDiag, hkMatrix3Ref a);
    HAVOK_C_API void HAVOK_C_CALL hkMatrix3_addDiagonal(hkMatrix3Ref ptr, float diag);
    HAVOK_C_API void HAVOK_C_CALL hkMatrix3_setTransposeMul(hkMatrix3Ref ptr, hkMatrix3Ref a, hkMatrix3Ref b);
    HAVOK_C_API void HAVOK_C_CALL hkMatrix3_addMul(hkMatrix3Ref ptr, float scale, hkMatrix3Ref a);
    HAVOK_C_API void HAVOK_C_CALL hkMatrix3_changeBasis(hkMatrix3Ref ptr, hkRotationRef t);
    HAVOK_C_API void HAVOK_C_CALL hkMatrix3_add(hkMatrix3Ref ptr, hkMatrix3Ref a);
    HAVOK_C_API void HAVOK_C_CALL hkMatrix3_sub(hkMatrix3Ref ptr, hkMatrix3Ref a);
    HAVOK_C_API void HAVOK_C_CALL hkMatrix3_mul(hkMatrix3Ref ptr, hkMatrix3Ref a);
    HAVOK_C_API void HAVOK_C_CALL hkMatrix3_mul_scale(hkMatrix3Ref ptr, float scale);
    HAVOK_C_API void HAVOK_C_CALL hkMatrix3_operator_equal(hkMatrix3Ref ptr, hkMatrix3Ref a);
    HAVOK_C_API bool HAVOK_C_CALL hkMatrix3_isOk(hkMatrix3Ref ptr);
    HAVOK_C_API void HAVOK_C_CALL hkMatrix3_multiplyVector(hkMatrix3Ref ptr, hkVector4Ref vectorIn, hkVector4Ref resultOut);
    HAVOK_C_API float HAVOK_C_CALL hkMatrix3_getDeterminant(hkMatrix3Ref ptr);
#define HK_FLOAT_EPSILON 1.192092896e-07F
    HAVOK_C_API int8_t HAVOK_C_CALL hkMatrix3_diagonalizeSymmetric(hkMatrix3Ref ptr, hkRotationRef eigenVec, hkVector4Ref eigenVal, int maxIter = 20, float epsilon = HK_FLOAT_EPSILON);
    HAVOK_C_API int8_t HAVOK_C_CALL hkMatrix3_diagonalizeSymmetricWarmStart(hkMatrix3Ref ptr, hkMatrix3Ref eigenVec, hkVector4Ref eigenVal, int maxIter = 20, float epsilon = HK_FLOAT_EPSILON);
    HAVOK_C_API void HAVOK_C_CALL hkMatrix3_diagonalizeSymmetricApproximation(hkMatrix3Ref ptr, hkRotationRef eigenVec, hkVector4Ref eigenVal, int maxIter = 10);

    HAVOK_C_API void HAVOK_C_CALL hkRotation_delete(hkRotationRef ptr);
    HAVOK_C_API void HAVOK_C_CALL hkRotation_set(hkRotationRef ptr, hkQuaternionRef q);
    HAVOK_C_API void HAVOK_C_CALL hkRotation_setAxisAngle(hkRotationRef ptr, hkVector4Ref axis, float angle);
    HAVOK_C_API bool HAVOK_C_CALL hkRotation_isOrthonormal(hkRotationRef ptr, float epsilon = float(1e-5f));
    HAVOK_C_API bool HAVOK_C_CALL hkRotation_isOk(hkRotationRef ptr);
    HAVOK_C_API void HAVOK_C_CALL hkRotation_renormalize(hkRotationRef ptr);

#ifdef __cplusplus
}
#endif